#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// const { startWebSocketServer } = require('../bin/wsModule');
// startWebSocketServer(server);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.listen(port, () => {
  console.log(`server.listen running on PORT ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// //-----------------SOCKET---------------//
const WebSocket = require('ws');
const ws = new WebSocket.Server({ server });
var clients = [] // khởi tạo danh sách các cl
//hàm truyền dữ liệu: gửi dữ liệu cho tất cả cl khác, ngoại từ cl đã gửi dữ liệu lên sv
function broadcast(socket, message) {
  console.log(clients.length);
  for (var i = 0; i < clients.length; i++) {
      if (clients[i] != socket) {
          clients[i].send(message.toString());
      }
  }
}
//sự kiện kết nối
ws.on('connection', function connection(socket) {
  console.log('A client connected'); //Thông báo đã có 1 client kết nối đến server
  clients.push(socket); //khi có 1 cl kết nối đến sv, thêm cl đó vào danh sách
  //sự kiện có tin nhắn từ cl gửi đến sv
  socket.on('message', function incoming(message) {
    console.log('Received: %s', message);

    // const str = String.fromCharCode(...message);
    // console.log("port: " + str[0])
    // console.log("UID: " + str.slice(3))
    
    // Xử lý tin nhắn nhận được ở đây (nếu cần)
    broadcast(socket, message);// Phản hồi lại client
  });

  //sự kiện kết thúc (cl ngắt kết nối)
  socket.on('close', function() {
    console.log('Client disconnected');

    var index = clients.indexOf(socket); // Lấy vị trí của cl đã ngắt kết nốt
    clients.splice(index, 1); // khi 1 cl ngắt kết nối, loại bỏ cl đó ra khỏi danh sách
  });
});



