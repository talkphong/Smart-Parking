const express = require('express');
const router = express.Router();
const authMiddleware = require('../middleware/authMiddleware');
const db = require('../models/database');
const session = require('express-session');

// Biến global để lưu trữ số lượng người dùng đang đăng nhập
let numberOfLoggedInUsers = 0;

// Middleware để tăng biến numberOfLoggedInUsers khi người dùng đăng nhập
router.use((req, res, next) => {
    if (req.session.user && req.session.userChecked !== true) {
        req.session.userChecked = true; // Đánh dấu đã kiểm tra
        numberOfLoggedInUsers++;
    }
    next();
});

// Middleware để giảm biến numberOfLoggedInUsers khi người dùng đăng xuất
router.use((req, res, next) => {
    if (req.session.user && req.session.userChecked === true && req.session.destroyed) {
        req.session.userChecked = false; // Đánh dấu là chưa kiểm tra
        numberOfLoggedInUsers--;
    }
    next();
});

router.get('/', authMiddleware.isAdmin, async (req, res) => {
    const year = new Date().getFullYear(); // Năm hiện tại
    const cur_month = new Date().getMonth() + 1; // Tháng hiện tại
    // Lấy ngày hiện tại
    const currentDate = new Date();

    // Lấy ngày đầu tiên của tháng
    const firstDayOfMonth = new Date(year, cur_month - 1, 1);

    // Tính số ngày chênh lệch giữa ngày hiện tại và ngày đầu tiên của tháng
    const diffDays = Math.floor((currentDate - firstDayOfMonth) / (1000 * 60 * 60 * 24));

    // Tính tuần hiện tại bằng cách chia số ngày chênh lệch cho 7 (số ngày trong một tuần)
    const cur_week = Math.ceil((diffDays + 1) / 7);


    try {
        const vaoQuery = `
            SELECT YEAR(thoigianmo) AS nam, MONTH(thoigianmo) AS thang, COUNT(*) AS so_luot_vao
            FROM lichsu
            WHERE YEAR(thoigianmo) = ? AND id_cong = 1
            GROUP BY nam, thang
            ORDER BY nam, thang
        `;

        const raQuery = `
            SELECT YEAR(thoigianmo) AS nam, MONTH(thoigianmo) AS thang, COUNT(*) AS so_luot_ra
            FROM lichsu
            WHERE YEAR(thoigianmo) = ? AND id_cong = 2
            GROUP BY nam, thang
            ORDER BY nam, thang
        `;

        const taotheQuery = `
            SELECT YEAR(ngaytaothe) AS nam, MONTH(ngaytaothe) AS thang, COUNT(*) AS so_luot_tao_the
            FROM the
            WHERE YEAR(ngaytaothe) = ?
            GROUP BY nam, thang
            ORDER BY nam, thang
        `;

        const doanhthuvanglaiQuery = `
            SELECT YEAR(thoigianmo) AS nam, MONTH(thoigianmo) AS thang, COUNT(*) AS so_luot_vao_vang_lai
            FROM lichsu LEFT JOIN the
            ON lichsu.sothe = the.sothe
            WHERE YEAR(thoigianmo) = ? AND id_cong = 1 AND the.loaithe LIKE 'Thẻ vãng lai'
            GROUP BY nam, thang
            ORDER BY nam, thang
        `;

        const soluongkhachhangQuery = `
            SELECT COUNT(id_khachhang) AS slkh
            FROM khachhang WHERE khachhang.active = 1
        `;

        const soluongphuongtienQuery = `
            SELECT COUNT(id_phuongtien) AS slpt
            FROM xecudan WHERE xecudan.active = 1
        `;
        
        const vaongay = `
            SELECT DAY(thoigianmo) AS ngay, COUNT(*) AS so_luot_vao_ngay
            FROM lichsu
            WHERE DAY(thoigianmo) = ? AND id_cong = 1
            GROUP BY ngay;
        `;

        const vaoResults = Array(12).fill(0);
        const raResults = Array(12).fill(0);
        const taotheResults = Array(12).fill(0);
        const doanhthuvanglaiResults = Array(12).fill(0);

        db.query(vaoQuery, [year], (vaoErr, vaoData) => {
            if (vaoErr) {
                console.error('Database query error (vao): ', vaoErr);
                res.status(500).send('Internal Server Error');
                return;
            }

            vaoData.forEach(result => {
                vaoResults[result.thang - 1] = result.so_luot_vao;
            });

            db.query(raQuery, [year], (raErr, raData) => {
                if (raErr) {
                    console.error('Database query error (ra): ', raErr);
                    res.status(500).send('Internal Server Error');
                    return;
                }

                raData.forEach(result => {
                    raResults[result.thang - 1] = result.so_luot_ra;
                });

                db.query(taotheQuery, [year], (taotheErr, taotheData) => {
                    if (taotheErr) {
                        console.error('Database query error (taothe): ', taotheErr);
                        res.status(500).send('Internal Server Error');
                        return;
                    }

                    taotheData.forEach(result => {
                        taotheResults[result.thang - 1] = result.so_luot_tao_the;
                    });

                    db.query(doanhthuvanglaiQuery, [year], (doanhthuvanglaiErr, doanhthuvanglaiData) => {
                        if (doanhthuvanglaiErr) {
                            console.error('Database query error (doanhthuvanglai): ', doanhthuvanglaiErr);
                            res.status(500).send('Internal Server Error');
                            return;
                        }

                        doanhthuvanglaiData.forEach(result => {
                            doanhthuvanglaiResults[result.thang - 1] = result.so_luot_vao_vang_lai * 5000;
                        });

                        db.query(soluongkhachhangQuery, (soluongkhachhangErr, soluongkhachhangData) => {
                            if (soluongkhachhangErr) {
                                console.error('Database query error (soluongkhachhang): ', soluongkhachhangErr);
                                res.status(500).send('Internal Server Error');
                                return;
                            }
                            
                            db.query(soluongphuongtienQuery, (soluongphuongtienErr, soluongphuongtienData) => {
                                if (soluongphuongtienErr) {
                                    console.error('Database query error (soluongphuongtien): ', soluongphuongtienErr);
                                    res.status(500).send('Internal Server Error');
                                    return;
                                }

                                // Rendern template thongke.ejs với dữ liệu đã lấy được từ database
                                res.render('thongke', {
                                    year: year,
                                    cur_month: cur_month,
                                    cur_week: cur_week,
                                    vaoResults: vaoResults,
                                    raResults: raResults,
                                    taotheResults: taotheResults,
                                    doanhthuvanglaiResults: doanhthuvanglaiResults,
                                    soluongkhachhangData: soluongkhachhangData,
                                    soluongphuongtienData: soluongphuongtienData,
                                    numberOfLoggedInUsers: numberOfLoggedInUsers
                                });
                            });
                        });
                    });
                });
            });
        });
    } catch (err) {
        console.error('Database query error: ', err);
        res.status(500).send('Internal Server Error');
    }
});

module.exports = router;

